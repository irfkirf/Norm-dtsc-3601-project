{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "8d49125e",
      "metadata": {
        "id": "8d49125e"
      },
      "source": [
        "# Lambda Functions & Pandas: Lesson and Exercises\n",
        "\n",
        "This notebook begins with a review of Python’s lambda functions and then moves into working with data in pandas. The goal is to see how short, inline operations can be used in Python, and then how pandas provides more powerful and efficient ways of expressing the same kinds of ideas."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cced64ec",
      "metadata": {
        "id": "cced64ec"
      },
      "source": [
        "## Review of Lambda Functions\n",
        "A **lambda function** is a way to define a very small function in a single line. These are sometimes called **anonymous functions** because they do not need a name. Instead, they are just written inline at the moment you need them.\n",
        "\n",
        "The general form is:\n",
        "\n",
        "```python\n",
        "lambda parameters: expression\n",
        "```\n",
        "\n",
        "Notice that there is no `return` keyword. Whatever expression you write after the colon is the value that gets returned.\n",
        "\n",
        "Let’s look at some simple examples."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "86bc3ded",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "86bc3ded",
        "outputId": "cbcb1f6b-7091-47dd-b76e-183b0e428549"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n",
            "24\n",
            "Happy birthday to you!\n",
            "Happy birthday to you!\n",
            "Happy birthday to you!\n",
            "\n",
            "15\n"
          ]
        }
      ],
      "source": [
        "# Single parameter\n",
        "x = lambda a: a + 7\n",
        "print(x(5))          # 12\n",
        "\n",
        "# Multiple parameters\n",
        "y = lambda a, b, c: a * b * c\n",
        "print(y(2, 3, 4))    # 24\n",
        "\n",
        "# Works with different types (string repetition)\n",
        "z = lambda a: a * 3\n",
        "print(z(\"Happy birthday to you!\\n\"))\n",
        "print(z(5))          # 15"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "a23ac79c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a23ac79c",
        "outputId": "096d5289-3319-46b8-ccc2-3be397903a1e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6, 8, 128, 4, 90, 46, 24, 68, 292]\n",
            "['low', 'low', 'high', 'low', 'high', 'high', 'high', 'high', 'high']\n",
            "[2, 12, 3, 23, 4, 64, 34, 45, 146]\n",
            "[64, 45, 23, 12, 34, 146]\n"
          ]
        }
      ],
      "source": [
        "# Working with lists\n",
        "my_list = [3, 4, 64, 2, 45, 23, 12, 34, 146]\n",
        "\n",
        "# Map: transform each element\n",
        "mapped_twice = list(map(lambda v: 2 * v, my_list))\n",
        "print(mapped_twice)\n",
        "\n",
        "# Conditional expression inside a lambda\n",
        "labels = list(map(lambda v: \"high\" if v > 10 else \"low\", my_list))\n",
        "print(labels)\n",
        "\n",
        "# Sorted with key: sort by last digit\n",
        "print(sorted(my_list, key=lambda v: v % 10))\n",
        "\n",
        "# Filter: keep only values > 10\n",
        "print(list(filter(lambda v: v > 10, my_list)))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9cadbe18",
      "metadata": {
        "id": "9cadbe18"
      },
      "source": [
        "#### Try it yourself\n",
        "- Write your own lambda that subtracts 5 from a number.\n",
        "- Write a lambda that takes two numbers and returns their average.\n",
        "- Use `map` with a lambda to square every number in a list."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "79d54145",
      "metadata": {
        "id": "79d54145"
      },
      "source": [
        "## Comparing Pure Python and Pandas\n",
        "The Python examples above are helpful, but they don’t always read very clearly, and they can become slow on large datasets. Pandas provides ways to express the same ideas in a style that is often both easier to read and much faster."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "b43cba3d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "b43cba3d",
        "outputId": "4d2b5d3f-78ec-40d7-d5af-1d94cff9d51c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12, 23, 4, 64, 45]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Value\n",
              "4     12\n",
              "0     23\n",
              "2     64\n",
              "1      4\n",
              "3     45"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66207ee3-baa9-4402-9572-39588aa208c9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66207ee3-baa9-4402-9572-39588aa208c9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-66207ee3-baa9-4402-9572-39588aa208c9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-66207ee3-baa9-4402-9572-39588aa208c9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f460d8b8-68bd-48e7-9afb-c7719b26bf90\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f460d8b8-68bd-48e7-9afb-c7719b26bf90')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f460d8b8-68bd-48e7-9afb-c7719b26bf90 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 4,\n        \"max\": 64,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          23,\n          45,\n          64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "# Pure Python with sorted + key\n",
        "my_list = [23, 4, 64, 45, 12]\n",
        "print(sorted(my_list, key=lambda v: v % 10))\n",
        "\n",
        "# Pandas equivalent\n",
        "import pandas as pd\n",
        "df = pd.DataFrame({\"Value\": [23, 4, 64, 45, 12]})\n",
        "df.sort_values(by=\"Value\", key=lambda col: col % 10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "359c8166",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "359c8166",
        "outputId": "58908d1e-872d-4fbd-bc68-ff939b2f6fef"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[64, 45, 23, 12, 34, 146]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Value\n",
              "2     64\n",
              "4     45\n",
              "5     23\n",
              "6     12\n",
              "7     34\n",
              "8    146"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-63a60c41-20dc-4f5d-b71a-01a136877df7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>146</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63a60c41-20dc-4f5d-b71a-01a136877df7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-63a60c41-20dc-4f5d-b71a-01a136877df7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-63a60c41-20dc-4f5d-b71a-01a136877df7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-94028a8f-bd96-45a5-bf32-ddd773319a32\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-94028a8f-bd96-45a5-bf32-ddd773319a32')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-94028a8f-bd96-45a5-bf32-ddd773319a32 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df[\\\"Value\\\"] > 10]\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48,\n        \"min\": 12,\n        \"max\": 146,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          64,\n          45,\n          146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# Pure Python with filter\n",
        "my_list = [3, 4, 64, 2, 45, 23, 12, 34, 146]\n",
        "print(list(filter(lambda v: v > 10, my_list)))\n",
        "\n",
        "# Pandas equivalent: Boolean indexing\n",
        "df = pd.DataFrame({\"Value\": my_list})\n",
        "df[df[\"Value\"] > 10]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7ee45dcf",
      "metadata": {
        "id": "7ee45dcf"
      },
      "source": [
        "#### Try it yourself\n",
        "- Recreate the sorted example in pandas, but sort by the first digit instead of the last.\n",
        "- Filter the DataFrame to keep only even numbers."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "947baa86",
      "metadata": {
        "id": "947baa86"
      },
      "source": [
        "## Back to Pandas\n",
        "Let’s now set up our environment and start working with the CMPD incident dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "3e109741",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3e109741",
        "outputId": "824211ce-f72d-4608-f485-fa9c68ac1d49"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Complaint_No',\n",
              " 'Block_No',\n",
              " 'Direction',\n",
              " 'Street_Name',\n",
              " 'Street_Type',\n",
              " 'Suffix',\n",
              " 'Apt_No',\n",
              " 'City',\n",
              " 'State',\n",
              " 'Zipcode',\n",
              " 'X_Coordinate',\n",
              " 'Y_Coordinate',\n",
              " 'Division',\n",
              " 'Reported_Date',\n",
              " 'Location_Desc',\n",
              " 'Location_Type',\n",
              " 'Incident_From_Date',\n",
              " 'Incident_From_Time',\n",
              " 'Incident_to_date',\n",
              " 'Incident_to_Time',\n",
              " 'Place1',\n",
              " 'Place2',\n",
              " 'Clearance_Status',\n",
              " 'Clearance_Date',\n",
              " 'Case_Status',\n",
              " 'Reporting_Agency',\n",
              " 'NIBRS_Hi_Class']"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "%matplotlib inline\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Make figures larger for readability\n",
        "plt.rcParams['figure.figsize'] = (15, 7)\n",
        "\n",
        "data_file = 'cmpd_Incident_2016.csv'  # ensure this file is present in the working directory\n",
        "\n",
        "# Read data\n",
        "crime_df = pd.read_csv(data_file, encoding=\"ISO-8859-1\")\n",
        "\n",
        "# Inspect columns to know what fields we have\n",
        "crime_df.columns.tolist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "ab61ee58",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ab61ee58",
        "outputId": "523b110c-eecf-4f35-c8c3-62e4ec6e4788"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(99857, 27)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# what does our data look like\n",
        "crime_df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "93af2d3c",
      "metadata": {
        "id": "93af2d3c"
      },
      "source": [
        "### Understanding the Index\n",
        "When pandas displays a DataFrame, the leftmost numbers are the index. These are row labels, not a data column. The default is zero-based. If we prefer a 1-based index and a name for presentation, we can set it:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "04f0a70b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "04f0a70b",
        "outputId": "d4f563bf-1993-45ff-abf6-e2db06dcd1c9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Complaint_No Block_No Direction                               Street_Name  \\\n",
              "id                                                                              \n",
              "1   2.020000e+13     2219            HEATHER GLEN                               \n",
              "2   2.020000e+13     8120        E   W T HARRIS                                 \n",
              "3   2.020000e+13     1415            TOM HUNTER                                 \n",
              "4   2.020000e+13                     ORR                                        \n",
              "5   2.020000e+13     6500        N   TRYON                                      \n",
              "\n",
              "   Street_Type    Suffix      Apt_No  \\\n",
              "id                                     \n",
              "1           LN                         \n",
              "2           BV                         \n",
              "3           RD                   220   \n",
              "4           RD                    58   \n",
              "5           ST                         \n",
              "\n",
              "                                        City State       Zipcode  ...  \\\n",
              "id                                                                ...   \n",
              "1   CHARLOTTE                                   NC         28208  ...   \n",
              "2   CHARLOTTE                                   NC         28215  ...   \n",
              "3   CHARLOTTE                                   NC         28213  ...   \n",
              "4   CHARLOTTE                                   NC                ...   \n",
              "5   CHARLOTTE                                   NC         28213  ...   \n",
              "\n",
              "   Incident_From_Time Incident_to_date Incident_to_Time  \\\n",
              "id                                                        \n",
              "1                1930         12/31/15           2330.0   \n",
              "2                   1              NaN              NaN   \n",
              "3                   0              NaN              NaN   \n",
              "4                   0           1/1/16              6.0   \n",
              "5                   5           1/1/16              6.0   \n",
              "\n",
              "                            Place1  \\\n",
              "id                                   \n",
              "1   Residential                      \n",
              "2   Open Area                        \n",
              "3   Commercial Place                 \n",
              "4   Residential                      \n",
              "5   Open Area                        \n",
              "\n",
              "                                               Place2  \\\n",
              "id                                                      \n",
              "1   Private Residence                             ...   \n",
              "2   Street/Highway                                ...   \n",
              "3   Hotel/Motel                                   ...   \n",
              "4   Mobile Home/Houseboat                         ...   \n",
              "5   Street/Highway                                ...   \n",
              "\n",
              "                                     Clearance_Status Clearance_Date  \\\n",
              "id                                                                     \n",
              "1   Open                                          ...                  \n",
              "2   Open                                          ...                  \n",
              "3   Normal Clearance - Cleared by Arrest          ...         1/1/16   \n",
              "4   Open                                          ...                  \n",
              "5   Open                                          ...                  \n",
              "\n",
              "                  Case_Status                               Reporting_Agency  \\\n",
              "id                                                                             \n",
              "1   Further Investigation      Charlotte-Mecklenburg Police Department         \n",
              "2   Inactive                   Charlotte-Mecklenburg Police Department         \n",
              "3   Close/Cleared              Charlotte-Mecklenburg Police Department         \n",
              "4   Inactive                   Charlotte-Mecklenburg Police Department         \n",
              "5   Inactive                   Charlotte-Mecklenburg Police Department         \n",
              "\n",
              "                 NIBRS_Hi_Class  \n",
              "id                               \n",
              "1           Motor Vehicle Theft  \n",
              "2   Hit And Run (Property Only)  \n",
              "3                Simple Assault  \n",
              "4            Aggravated Assault  \n",
              "5            Aggravated Assault  \n",
              "\n",
              "[5 rows x 27 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f2606173-bfa3-4e1f-9087-68ead61e46c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Complaint_No</th>\n",
              "      <th>Block_No</th>\n",
              "      <th>Direction</th>\n",
              "      <th>Street_Name</th>\n",
              "      <th>Street_Type</th>\n",
              "      <th>Suffix</th>\n",
              "      <th>Apt_No</th>\n",
              "      <th>City</th>\n",
              "      <th>State</th>\n",
              "      <th>Zipcode</th>\n",
              "      <th>...</th>\n",
              "      <th>Incident_From_Time</th>\n",
              "      <th>Incident_to_date</th>\n",
              "      <th>Incident_to_Time</th>\n",
              "      <th>Place1</th>\n",
              "      <th>Place2</th>\n",
              "      <th>Clearance_Status</th>\n",
              "      <th>Clearance_Date</th>\n",
              "      <th>Case_Status</th>\n",
              "      <th>Reporting_Agency</th>\n",
              "      <th>NIBRS_Hi_Class</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>2219</td>\n",
              "      <td></td>\n",
              "      <td>HEATHER GLEN</td>\n",
              "      <td>LN</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28208</td>\n",
              "      <td>...</td>\n",
              "      <td>1930</td>\n",
              "      <td>12/31/15</td>\n",
              "      <td>2330.0</td>\n",
              "      <td>Residential</td>\n",
              "      <td>Private Residence                             ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td></td>\n",
              "      <td>Further Investigation</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Motor Vehicle Theft</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>8120</td>\n",
              "      <td>E</td>\n",
              "      <td>W T HARRIS</td>\n",
              "      <td>BV</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28215</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Open Area</td>\n",
              "      <td>Street/Highway                                ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td></td>\n",
              "      <td>Inactive</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Hit And Run (Property Only)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>1415</td>\n",
              "      <td></td>\n",
              "      <td>TOM HUNTER</td>\n",
              "      <td>RD</td>\n",
              "      <td></td>\n",
              "      <td>220</td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28213</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Commercial Place</td>\n",
              "      <td>Hotel/Motel                                   ...</td>\n",
              "      <td>Normal Clearance - Cleared by Arrest          ...</td>\n",
              "      <td>1/1/16</td>\n",
              "      <td>Close/Cleared</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Simple Assault</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>ORR</td>\n",
              "      <td>RD</td>\n",
              "      <td></td>\n",
              "      <td>58</td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td></td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1/1/16</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Residential</td>\n",
              "      <td>Mobile Home/Houseboat                         ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td></td>\n",
              "      <td>Inactive</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Aggravated Assault</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>6500</td>\n",
              "      <td>N</td>\n",
              "      <td>TRYON</td>\n",
              "      <td>ST</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28213</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>1/1/16</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Open Area</td>\n",
              "      <td>Street/Highway                                ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td></td>\n",
              "      <td>Inactive</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Aggravated Assault</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2606173-bfa3-4e1f-9087-68ead61e46c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f2606173-bfa3-4e1f-9087-68ead61e46c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f2606173-bfa3-4e1f-9087-68ead61e46c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a70c5232-88e0-4ed6-877b-a06fde590831\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a70c5232-88e0-4ed6-877b-a06fde590831')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a70c5232-88e0-4ed6-877b-a06fde590831 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "crime_df"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "crime_df.index = range(1, len(crime_df) + 1)\n",
        "crime_df.index.name = 'id'\n",
        "crime_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9b9ddde7",
      "metadata": {
        "id": "9b9ddde7"
      },
      "source": [
        "## Data Quality: Missing or Misleading Values\n",
        "Real-world datasets often contain missing values, and they may be recorded in inconsistent ways. It’s important to standardize these so pandas recognizes them as missing."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "33c94097",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "33c94097",
        "outputId": "bb69c6a0-b7b2-43d3-e476-5c3976e8bbac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Suffix              99463\n",
              "Apt_No              85635\n",
              "Direction           83728\n",
              "Clearance_Date      60120\n",
              "Zipcode             28012\n",
              "Incident_to_date    26576\n",
              "Incident_to_Time    26576\n",
              "Y_Coordinate         6737\n",
              "X_Coordinate         6737\n",
              "Block_No             5687\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Suffix</th>\n",
              "      <td>99463</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Apt_No</th>\n",
              "      <td>85635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Direction</th>\n",
              "      <td>83728</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Clearance_Date</th>\n",
              "      <td>60120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Zipcode</th>\n",
              "      <td>28012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Incident_to_date</th>\n",
              "      <td>26576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Incident_to_Time</th>\n",
              "      <td>26576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Y_Coordinate</th>\n",
              "      <td>6737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X_Coordinate</th>\n",
              "      <td>6737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Block_No</th>\n",
              "      <td>5687</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# Replace empty strings with NA (after stripping spaces)\n",
        "crime_df = crime_df.map(lambda s: pd.NA if isinstance(s, str) and s.strip() == \"\" else s)\n",
        "\n",
        "# Treat common placeholders as missing\n",
        "placeholders = {\"N/A\", \"NA\", \"NULL\", \"NONE\", \"UNKNOWN\", \"UNSPECIFIED\", \"(null)\"}\n",
        "crime_df = crime_df.map(lambda s: pd.NA if isinstance(s, str) and s.strip().upper() in placeholders else s)\n",
        "\n",
        "# Quick check: which columns have the most missing values?\n",
        "crime_df.isna().sum().sort_values(ascending=False).head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "be4d038a",
      "metadata": {
        "id": "be4d038a"
      },
      "source": [
        "#### To Do #1\n",
        "- Which block or location field has the most reported incidents?  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "3303603b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "3303603b",
        "outputId": "c30b48be-7500-4e5e-b5d8-256cd263a4cb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5501 JOSH BIRMINGHAM PY    793\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5501 JOSH BIRMINGHAM PY</th>\n",
              "      <td>793</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "# Most incidents by BLOCK (combine Block_No + Street_Name + Street_Type)\n",
        "(crime_df['Block_No'].fillna('').astype(str).str.strip() + ' ' +\n",
        " crime_df['Street_Name'].fillna('').str.strip() + ' ' +\n",
        " crime_df['Street_Type'].fillna('').str.strip()\n",
        ").str.replace(r'\\s+', ' ', regex=True).str.strip().value_counts().head(1)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7nbF2wJf6plK"
      },
      "id": "7nbF2wJf6plK",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "ee0cf368",
      "metadata": {
        "id": "ee0cf368"
      },
      "source": [
        "#### To Do #2\n",
        "- What problem in the dataset does this highlight?  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "86fe1dc8",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        },
        "id": "86fe1dc8",
        "outputId": "260951ca-0b28-467f-a41a-92a39ce24437"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-1519661311.py, line 2)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-1519661311.py\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    There is a disproportionately large number of reported incidents on this block which might be due to external factors such as overpolicing, or misreporting of data\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "####\n",
        "There is a disproportionately large number of reported incidents on this block which might be due to external factors such as overpolicing, or misreporting of data"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d20dbbf6",
      "metadata": {
        "id": "d20dbbf6"
      },
      "source": [
        "#### To Do #3\n",
        "- How could you address it?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Maybe disclude that data point or group it with the street name, not the specific block because there are other blocks next to it, but are not reported on\n",
        "\n",
        "\n",
        "*   Disclude the data point\n",
        "*   Group the incidents onto other blocks on the street\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "zOohBhQK6dxs"
      },
      "id": "zOohBhQK6dxs"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2e608b36",
      "metadata": {
        "id": "2e608b36"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "2ed73909",
      "metadata": {
        "id": "2ed73909"
      },
      "source": [
        "## Analyzing a Specific Crime\n",
        "Suppose we are interested in incidents related to **Theft**."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "9c6df20f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9c6df20f",
        "outputId": "bbf0fdb8-0330-40b5-a5e6-993d50840424"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(np.int64(25245), np.float64(25.28115204742782))"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# Convert to string in case of missing/non-string values, then search for 'theft' (case-insensitive)\n",
        "crime_type = crime_df['NIBRS_Hi_Class'].astype(str)\n",
        "is_theft = crime_type.str.contains('theft', case=False, na=False)\n",
        "\n",
        "# Count theft incidents and compute percentage of total\n",
        "theft_count = is_theft.sum()\n",
        "theft_pct = 100 * theft_count / len(crime_df)\n",
        "\n",
        "theft_count, theft_pct"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "30b39928",
      "metadata": {
        "id": "30b39928"
      },
      "source": [
        "#### To Do #4\n",
        "- How many incidents are related to Theft?  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "d36ef96a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d36ef96a",
        "outputId": "7d4de91f-9ef9-4963-9470-a1d5bf61e034"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.int64(25245)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "crime_df['NIBRS_Hi_Class'].str.contains('theft', case=False, na=False).sum()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e19eb1b5",
      "metadata": {
        "id": "e19eb1b5"
      },
      "source": [
        "#### To Do #5\n",
        "- What percentage of the total does this represent?  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "20351fe3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "20351fe3",
        "outputId": "ac642c58-e86a-4afb-bd32-903d1e1f8409"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25.28%\n"
          ]
        }
      ],
      "source": [
        "pct = 100 * crime_df['NIBRS_Hi_Class'].str.contains('theft', case=False, na=False).mean()\n",
        "print(f\"{pct:.2f}%\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b877d7f0",
      "metadata": {
        "id": "b877d7f0"
      },
      "source": [
        "#### To Do #6\n",
        "- Which three crime categories are the most common overall?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "66bea843",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "66bea843",
        "outputId": "a4ba8fb3-09fd-4432-a7d4-27f38f321c9d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "NIBRS_Hi_Class\n",
              "Theft From Motor Vehicle    10965\n",
              "Simple Assault               9035\n",
              "All Other Thefts             8792\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NIBRS_Hi_Class</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Theft From Motor Vehicle</th>\n",
              "      <td>10965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Simple Assault</th>\n",
              "      <td>9035</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All Other Thefts</th>\n",
              "      <td>8792</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "crime_df['NIBRS_Hi_Class'].str.strip().value_counts().head(3)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "be68877a",
      "metadata": {
        "id": "be68877a"
      },
      "source": [
        "## Re-expressing Field Values (Dates → Months)\n",
        "How about if we want to get a sense of the distribution of incidents over the months of the year? Do have the necessary data to accomplish this?\n",
        "If we look at our fields we can see the Reported_Date field includes this data but not in the format we want."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "fda59c01",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fda59c01",
        "outputId": "0577f402-fc83-4ed0-94e7-593e71685133"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "type(crime_df['Reported_Date'][1])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "35f680ad",
      "metadata": {
        "id": "35f680ad"
      },
      "source": [
        "Notice that we are using index 1 because we remapped the index for this dataframe to start at 1 rather than 0.\n",
        "Now that we know the datatype for this field is a string we can either use string methods to create a new mapping to month names or we convert/parse it with `pd.to_datetime`, then use the `.dt` accessor to extract parts like month:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "1890caab",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "1890caab",
        "outputId": "3343f62e-39b8-42f9-c41f-b61355134633"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3783604124.py:2: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
            "  crime_df['Reported_Date'] = pd.to_datetime(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Reported_Date  Month MonthName\n",
              "id                               \n",
              "1     2016-01-01      1   January\n",
              "2     2016-01-01      1   January\n",
              "3     2016-01-01      1   January\n",
              "4     2016-01-01      1   January\n",
              "5     2016-01-01      1   January"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0ffccf6-715b-4660-acf5-9f6f5f7bcf85\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reported_Date</th>\n",
              "      <th>Month</th>\n",
              "      <th>MonthName</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0ffccf6-715b-4660-acf5-9f6f5f7bcf85')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c0ffccf6-715b-4660-acf5-9f6f5f7bcf85 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c0ffccf6-715b-4660-acf5-9f6f5f7bcf85');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8b93484f-12d0-4a96-8251-b605fb5ce79d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b93484f-12d0-4a96-8251-b605fb5ce79d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8b93484f-12d0-4a96-8251-b605fb5ce79d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"crime_df[['Reported_Date', 'Month', 'MonthName']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reported_Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-01-01 00:00:00\",\n        \"max\": \"2016-01-01 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2016-01-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthName\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"January\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "# Parse date strings into datetime; invalid parses become NaT\n",
        "crime_df['Reported_Date'] = pd.to_datetime(\n",
        "    crime_df['Reported_Date'], errors='coerce'\n",
        ")\n",
        "\n",
        "# Extract month number and month name using .dt accessors\n",
        "crime_df['Month'] = crime_df['Reported_Date'].dt.month\n",
        "crime_df['MonthName'] = crime_df['Reported_Date'].dt.month_name()\n",
        "\n",
        "crime_df[['Reported_Date', 'Month', 'MonthName']].head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "dc22dc07",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "id": "dc22dc07",
        "outputId": "11869200-5942-4e33-d636-f743b9e07048"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Bar chart by MonthName without enforcing order (will default to alphabetical)\n",
        "ax = crime_df['MonthName'].value_counts().plot(kind='bar', rot=45)\n",
        "ax.set_xlabel('Month')\n",
        "ax.set_ylabel('Number of Incidents')\n",
        "ax.set_title('Incidents by Month (Unordered)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "c49ce576",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "id": "c49ce576",
        "outputId": "fe3ad6c1-971d-415c-993e-b5a4d41b2c45"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "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XpkzZ1bu3Lk92r/66iulTp1aTz/99B1tI0k6cOCAnn76abVr106tWrXStGnT1Lp1a5UpU0YPPfSQR9/OnTsra9asGjBggHvE26BBgzR48GBVr15dnTp10t69ezVp0iRt2bJF69at89jWZ8+eVc2aNdWoUSM9++yz+vzzz9W3b18VL15ctWrVkiRduXJFVapU0YEDB/TSSy8pb968mj9/vlq3bq1z586pe/fut70vu3btUqVKlZQhQwb16dNHqVKl0gcffKAqVapo9erVKleunCTp2LFjeuKJJ+RyudS/f3+lTZtWH330kfz8/P5xe8XExKhu3bpauXKlmjRpou7du+vChQsKDw/XL7/84t7H77//vurXr69mzZopKipKn376qZ555hktXrz4jkZclilTxrHzAwIAcE8zAABw35k+fbpJsi1btrjbWrVqZZJsyJAhHn0ffvhhK1OmjPvyqlWrTJJ169Yt3npjY2Pd/8+dO7e1atXKfblHjx4myTZt2uRuO3XqlAUEBJgkO3z4sJmZXbhwwTJmzGjt27f3WHdERIQFBAR4tN9pzadPnzZJNnDgQI9+Z8+eNUn2zjvvxLsv/yTutrt27epx/+vUqWO+vr52+vRpMzPbu3evSbJJkyZ5XL9+/fqWJ08ej212K7lz57Y6depYdHS0BQcH25tvvmlmZrt37zZJtnr16lvuz1KlSlm2bNnszz//dLf9/PPPliJFCmvZsqW7beDAgSbJ2rZt63G7Tz31lGXOnNmjLW3atB779N+s41YqVqzosb/iZMqUyUqWLPmP14+TO3duk2Rr1qxxt506dcr8/Pysd+/e7ra47VWxYkWLjo726Ovr62s1atSwmJgYd/v48eNNkk2bNs3dVrlyZZNkM2fOdLddu3bNgoODrXHjxu62MWPGmCT75JNP3G1RUVEWGhpq6dKls8jISHf7Xx+jDRs2NF9fXzt48KC77fjx45Y+fXp7/PHH3W1du3Y1l8tlP/30k7vtzz//tMDAQI/nVlzdlStXdl+eNm2aSbLRo0fH2543PzYvX77ssSwqKsqKFStmVatW9Wj/6/M+zttvv22S7OTJk/GWAQCQnHGoKQAA8NCxY0ePy5UqVdKhQ4fcl7/44gu5XC4NHDgw3nVdLtdt1/vNN9/oscce06OPPupuy5o1q5o1a+bRLzw8XOfOndPzzz+vP/74w/3n4+OjcuXK6bvvvktwzbeTOnVq+fr66vvvv9fZs2f/sf+tvPTSS+7/u1wuvfTSS4qKitKKFSskSQULFlS5cuU0e/Zsd78zZ87o22+/VbNmzf52m93Mx8dHzz77rObOnSvpxqQKuXLlUqVKleL1PXHihLZv367WrVt7jLIrUaKEnnzySX3zzTfxrnOrbfjnn38qMjLyjur7L+v4888/lSlTpnjtkZGRCT4Zf9GiRT22SdasWVWoUKFbPh7at28vHx8f9+UVK1YoKipKPXr08JgYpH379sqQIYOWLFnicf106dJ5jFj09fXVo48+6nFb33zzjYKDg/X888+721KlSqVu3brp4sWLWr169S3vR0xMjJYvX66GDRsqX7587vbs2bOradOmWrt2rXu7Ll26VKGhoSpVqpS7X2BgYLzn1q188cUXypIli7p27Rpv2c2PzZtHpp49e1bnz59XpUqVtG3btn+8DUnu/fvHH3/cUX8AAJILgjcAAOAWd762m2XKlMkjlDp48KBCQkI8Ap078dtvv+nBBx+M116oUCGPy/v375ckVa1aVVmzZvX4W758uU6dOpXgmm/Hz89PI0aM0LfffqugoCA9/vjjGjlypCIiIu7oPqVIkcIjFJFuBG2SPM6r1bJlS61bt06//fabJGn+/Pm6fv26WrRocUe3E6dp06bavXu3fv75Z82ZM0dNmjS5ZXAXdzt/3baSVKRIEf3xxx/xJhN44IEHPC7HBSUJCST/yzrs/58X72YZMmTQhQsX7vj2b1VDXB23qiFv3rwel2+33Xx9fZUvXz738jg5c+aMt/3/eltxj/u/zvBbpEgRj9v8q9OnT+vy5cu33YexsbH6/fff3ev462ywkm7Z9lcHDx5UoUKFlDLl35+BZvHixXrsscfk7++vwMBA9yHc58+f/8fbkP5v/95p0AwAQHJB8AYAANxuHv3jLXGTLcyaNUvh4eHx/v56gvb/WnOPHj20b98+DRs2TP7+/nrjjTdUpEgR/fTTT/9pvTdr0qSJUqVK5R719sknn6hs2bK3DFX+Trly5ZQ/f3716NFDhw8fVtOmTROtxtttx1sFYom9jsyZM98yGCtcuLD27dunqKgoR2q41fkFEyIxtllS8MMPP6h+/fry9/fXxIkT9c033yg8PFxNmza94/sat3+zZMniZKkAANxzCN4AAECC5M+fX8ePH9eZM2cSdL3cuXO7R7PdbO/evfHWL92YCbF69erx/v46I+Od+KdRNvnz51fv3r21fPly/fLLL4qKitKoUaP+cb2xsbHxDmHct2+fJHlMXhAYGKg6depo9uzZ+u2337Ru3boEj3aL8/zzz+v7779XkSJFPA4tvFncJAV/3baS9OuvvypLlixKmzZtgm/bqdFKhQsX1uHDh+O116tXT1euXNEXX3zhyO3+1e22W1RUlA4fPhxv8oc7Xef+/fvjzd7766+/etzmX2XNmlVp0qS57T5MkSKFcuXK5V7HgQMH4vW7Vdtf5c+fX3v37tX169dv2+eLL76Qv7+/li1bprZt26pWrVrxZqD9J4cPH1aWLFnijU4FACC5I3gDAAAJ0rhxY5mZBg8eHG/Z341+qV27tjZu3KjNmze7206fPu1x7jNJCgsLU4YMGfT222/fMgw4ffp0gmtOkyaNJOncuXMe7ZcvX9bVq1c92vLnz6/06dPr2rVrd7Tu8ePHu/9vZho/frxSpUqlatWqefRr0aKFdu/erVdeeUU+Pj5q0qRJgu+HJL3wwgsaOHDg3waD2bNnV6lSpTRjxgyP+/zLL79o+fLlql279r+67bRp08bbhokhNDRUZ8+ejRdiduzYUdmzZ1fv3r3dgebNTp06paFDhyZaHdWrV5evr6/Gjh3r8VieOnWqzp8/f0ezd/5V7dq1FRERoXnz5rnboqOjNW7cOKVLl06VK1e+5fV8fHxUo0YNffnllx6HLZ88eVJz5sxRxYoVlSFDBkk3njMbNmzQ9u3b3f3OnDkT77l1K40bN9Yff/zh8TiOE7cNfHx85HK5FBMT41525MiRBM1SunXrVoWGht5xfwAAkou/P5kDAADAXzzxxBNq0aKFxo4dq/3796tmzZqKjY3VDz/8oCeeeMJjsoGb9enTR7NmzVLNmjXVvXt3pU2bVlOmTFHu3Lm1Y8cOd78MGTJo0qRJatGihUqXLq0mTZooa9asOnr0qJYsWaIKFSrcMiT4O6lTp1bRokU1b948FSxYUIGBgSpWrJiio6NVrVo1PfvssypatKhSpkyphQsX6uTJk3cUjPn7+2vp0qVq1aqVypUrp2+//VZLlizRq6++Gm9kT506dZQ5c2bNnz9ftWrVUrZs2RJ0H+Lkzp1bgwYN+sd+77zzjmrVqqXQ0FC1a9dOV65c0bhx4xQQEHBH17+VMmXKaMWKFRo9erRCQkKUN29elStX7l+t62Z16tRRypQptWLFCnXo0MHdnilTJi1cuFC1a9dWqVKl1Lx5c5UpU0aStG3bNs2dOzdRw5ysWbOqf//+Gjx4sGrWrKn69etr7969mjhxoh555BGPiRTuVIcOHfTBBx+odevW2rp1q/LkyaPPP/9c69at05gxY/528oihQ4cqPDxcFStWVOfOnZUyZUp98MEHunbtmkaOHOnu16dPH33yySd68skn1bVrV6VNm1YfffSRHnjgAZ05c+ZvRyq2bNlSM2fOVK9evbR582ZVqlRJly5d0ooVK9S5c2c1aNBAderU0ejRo1WzZk01bdpUp06d0oQJE1SgQAGP5+7tnDp1Sjt27FCXLl0StvEAAEgGCN4AAECCTZ8+XSVKlNDUqVP1yiuvKCAgQGXLllX58uVve53s2bPru+++U9euXTV8+HBlzpxZHTt2VEhIiNq1a+fRt2nTpgoJCdHw4cP1zjvv6Nq1a8qRI4cqVaqkNm3a/KuaP/roI3Xt2lU9e/ZUVFSUBg4cqK5du+r555/XypUrNWvWLKVMmVKFCxfWZ599psaNG//jOn18fLR06VJ16tRJr7zyitKnT6+BAwdqwIAB8fr6+vrqueee08SJE//1YaYJUb16dS1dutRdT6pUqVS5cmWNGDEi3qQCd2r06NHq0KGDXn/9dV25csUdOP5XQUFBql27tj777DOP4E26cV67X375Re+8846WLFmiWbNmKUWKFCpSpIj69et326D33xo0aJCyZs2q8ePHq2fPngoMDFSHDh309ttvK1WqVAleX+rUqfX999+rX79+mjFjhiIjI1WoUCFNnz5drVu3/tvrPvTQQ/rhhx/Uv39/DRs2TLGxsSpXrpw++eQTj+2eK1cufffdd+rWrZvefvttZc2aVV26dFHatGnVrVs3+fv73/Y2fHx89M033+itt97SnDlz9MUXXyhz5syqWLGiihcvLunGRCdTp07V8OHD1aNHD+XNm1cjRozQkSNH7ih4W7Bggfz8/PTss8/e2UYDACAZcVlyO/srAADAPapnz56aOnWqIiIi3Ie/4oYffvhBVapU0a+//nrL2W+RcD169NAHH3ygixcvenXilIcfflhVqlTRe++957UaAADwFoI3AACAu+Dq1avKlSuX6tatq+nTp3u7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tHnz5njh2+TJkwnfHBIXNFy6dMl9+cEHH1Tp0qU1dOhQXb16VT4+Pt4s8b5x/vx5pUyZUk888YQWLVqkunXr6r333tMLL7yg8+fP68svv5TEyNvEsGPHDkVHR7sf28uXL9fatWvdy6tWraratWtr4MCBioyMZJt7Sdwh2ClSpNDRo0cVFhamX375RS1bttRXX32lcePG6cSJE+yfe8RfA7WMGTNq5syZqlmzpn7++WdNnz5d0o33fd7LE8+XX36pVq1a6dixY5o5c6YuXbrE5yUvi42N1aZNmzR48GCtXLmSsNkLzp07p/fff18jRozQ4cOH3e33yvOCb+33ubjg5t1339WZM2fUsWNHpUuXTjVq1FDHjh21aNEiPf3005ozZ47Wr1/PB527KG5b//777+4XjJQpU+rtt9/Wtm3bNGvWLG+Wl+SZmVwulw4fPix/f3916NBBP//8s5o0aaK+ffuqZs2aWrt2rfLnz6/evXtr2bJlhG//UapUqSRJgwYN0qVLl9S3b19J0ptvvqlNmza5w7ciRYpo3rx5euedd3T9+nVedxwwZcoUtW7dWitXrnQHooMHD1ZgYKD7i9K98kElubjV9syZM6dcLpcGDx6sVq1a6d1339WLL74oSdq9e7dGjRqlHTt23O1Sk50hQ4aoVKlSWr16ta5fv65du3apV69eatCggbp06aJly5ZJkl544QVdu3ZNv/76qyRGld9tN5/3cMiQIWrcuLE2btyowMBAvfrqq2rQoIGWLVumiRMnKiIiQpLUpk0b7dy505tl37du3l/79+/XwYMHdezYMeXLl09jxoxR8eLFNWvWLM2dO1fSjc+1PKcSLu6948SJEzp58qT27t0rSZo+fbqqVq2qCRMmaNGiRbp69SrhmxelSJFCPXr00MiRI3Xo0CF9/PHH3i7pvpMxY0a1b99etWrV0rJly7Rq1Spvl+TJcF+KiYlx/3/+/PmWJUsW2717t7vtyy+/tH79+lnatGntmWeesZQpU1qLFi3s8uXLFhsb642S7xs375uxY8da2bJlrWnTpnbw4EGLjIw0M7MWLVpY586d4/VHwkRFRbn/LVq0qLlcLqtfv368x3jNmjWtaNGiNn/+fPd1cOdufowuWLDAXC6XbdmyxczMvvjiC6tevbrVrVvXNm7caGZmFy5csPr161v79u15vXHIO++8Y82aNTNfX19r2rSpjR071mJiYuy5556z559/3tvlJTs3PweuXbvm/v+5c+esWbNmliZNGuvZs6e7/erVq1a3bl1r1KgRr/GJJCwszHLmzGkrVqwwM7P//e9/tmzZMnv00UetXLlyVrlyZVuzZo2FhIRYp06dvFzt/a1Pnz4WFBRkX331lR0+fNhj2eDBg+3hhx+2GjVqWOXKlS1btmx2/fp17xR6H7v5vXngwIFWrFgxK1y4sAUFBdmECRPMzOzQoUNWu3Ztq1q1qs2dO9dbpSZpcdt50aJFVq5cOStSpIgVLFjQXn31VXefRo0aWbFixWzOnDl2+fJlb5V634nbNxEREbZ37177888/3d8R3njjDXO5XDZ16lRvlpjsxe2DS5cu2dmzZ93tP//8s9WvX9+KFStm33//vUdfbyJ4u8/Nnz/fhg4daiNHjjQzixcqHD582N544w2rUKGCZcqUySIiIszs3njwJnfvv/++DRo0yN59912rUaOGZc+e3Vq1amVr1qyxBQsWmL+/v+3cudPbZSZZcY/hM2fOmNmNx35oaKgFBQXZ2rVr433ZDQ0NtbJly9qFCxfueq3JxZw5c2z8+PE2ZcoUj/YFCxbYk08+6RG+Xblyxb0PeL35b/4uuFm9erX17NnTcuTIYXXr1rV27dqZy+Wyr7/++i5WmLzd/Ph955137Pnnn7f69evbTz/9ZGZmGzdutMcee8wqVKhgQ4cOtffff9+qVatmxYoVc78nE779ezd/rqlevboFBQXZihUr3O1//vmnbdu2zerXr2/Vq1e3wMBAy5Ahg/vHAdxd69evtwIFCtj69evN7EYIHRERYQsXLrQrV66YmdmHH35o3bt3t3bt2rlDt+joaK/VfD8bOnSoZc2a1cLDw+3y5cv2zDPPWIYMGeyXX34xM7ODBw9avXr1rESJEhYeHu7lapOmpUuXWurUqW3ixIm2Z88ee++998zlctmSJUvcfZ5++mnLkSOHffbZZ16s9P4R976+YMECK1WqlD3wwANWoUIFa9u2rZ0+fdpiY2Nt8ODB5nK5bPr06d4tNpmK2wdff/21VatWzYoUKWJhYWH26aef2vXr123z5s327LPPWokSJWz16tVervYGgrf7VGxsrF26dMnSpk1rLpfLOnbs6F4W9wE/7kNMTEyMXbt2zR599FF78cUXvVLv/eDmL1azZ8+2wMBA27t3r7tt1qxZ1qlTJ/Pz87NWrVpZihQprHPnznbt2jWCiQSK217Lli2zVq1auT/gX79+3YoXL27FihWzzZs3x9uuv/32212vNbnYv3+/PfDAA+ZyuWzUqFFmduMLVZwFCxZYWFiYhYaGuj+wmxE4/Fc3b7+vvvrKZsyYYR988IGZ/d/zICoqyv7880/r3r27NWrUyFwul/u1nu3/39y8/YYNG2YBAQHWrVs3K1mypGXOnNk++eQTM7sRNvTs2dNy5cplNWvW9AgUGM3z793q8VutWjXLnj27hYeHe4w+NLuxHyZNmmRp0qSxYcOGmRnBv9P+un2//vprCwoKsujoaNuxY4f17dvXHnzwQUuVKpU9+uijt/zxi+eId1y+fNlq1apls2bNMjOzhQsXWqZMmWzixIlm9n+je3fv3m0vv/wy4ei/1LlzZ/cItyNHjlj+/Plv+R7dvHlzO3jwoFdqvB+tWLHC0qRJY++//76dPXvW3nzzTXO5XDZz5kwzuzEKa8iQIeZyudzPESSuJUuWWJo0aWzIkCG2detWq1GjhoWEhNi6devMzGzt2rXWpEkTy5Url61du9bL1RK83bfiXqj//PNPK1q0qBUoUOCWQYPZ/30oGjRokD399NN3tc770eLFi+3NN9+0999/38zij0Lctm2b9ezZ04oXL245c+Z0fwjly0HCLFiwwP1ivWHDBo8QolixYlasWDHbsmUL2/Vf+ut2u3Llii1atMhKlChhZcqUcbff/MV39uzZ1r17d8KeRHLzduzbt6+FhIRY+fLlLWvWrBYWFmbbtm2Lt60vX75s77//vvn7+9uePXvudsnJ1pEjR6xDhw62Zs0ad1vr1q0tKCjIZs6c6X6+xJ1OIA6BQuJYvHix+wcWsxvhW0hIiIWHh99yG0+ePNly5sxpx44du5tl3tfiTndy+vRpK1SokBUoUMCyZMli7du3tzlz5lhERIT5+PjYvHnzvFwpzG68x588edKCg4Nt9+7d9v3331u6dOls0qRJZnbjveTVV1+NFwQRviVMVFSUlS5d2iZPnmznz5+3HDlyWIcOHdzvGRMnTrRly5Z5ucr7S2xsrEVHR1uXLl2sV69eZmZ28uRJy5Url3Xp0sXdLyoqyqKjo2348OEep3PCfxcbG2sXL160OnXq2ODBg83sxuenBx54wGMfmJmtWbPGWrdufU+E0gRv94m/+yJ76tQpy5kzp1WoUMFjpMlfdejQwUqWLGmXLl1yosT7XmxsrP3xxx/mcrnM5XLZK6+84l4Wt/9uHo149uxZK1SokPXt29cr9SZlBw8etAIFCrjDzThxIVBUVJSVKlXKcuTIYdu2bfNGiUnaX19vbt6u33zzjeXOnduqVasWb/nfrQP/3qhRoywkJMR+/PFHMzObO3euuVwuq1Spkm3bts39Af7msLRSpUo2YsQIr9Sb3MyaNctcLpcVLlw43uGLbdq0sezZs9usWbPs3LlzHssI/RPHr7/+akFBQdaqVSuP7R8Xvq1YscJjhL+Z2U8//WQlS5a0Q4cOeaXm+81nn31mZcuWdR8mt3fvXhs6dKgtXrzYzp8/b2Y3Ro+EhoYSMnjJ7V6PWrZsaTVq1LA0adLYtGnT3O3Hjx+3SpUq2YwZM/72+vhnQ4YMsaZNm1r27NmtY8eO7tepK1euWOvWre3NN9+0qKgotvFd1rx5c5swYYIdO3YsXiD65Zdf2oIFC7xcYfIWExNjjz/+uG3bts1OnDhh2bNntw4dOriXf/nll+738Hvl3IfManofuHnWoSlTpqhXr1569tlntWXLFp09e1ZZs2bV1q1bdeTIEXXq1Em7du2Kt46jR4/q9OnTmjp1qtKkSXO378J9I3PmzNq/f79CQkK0YsUK/fLLL5L+b/bZuH9dLpcyZsyoevXq6cSJE16rN6mwv8zw9McffygmJka1a9f26OPr66uYmBilSpVKmzZt0gMPPKCAgIC7XW6SF/c4HTlypBo1aqTKlStr0qRJOn78uGrVqqVJkybp999/V1hYmCTJ19fXPbPmX9eBhFu+fLk+/fRTSdL58+e1f/9+jRw5UmXKlNGCBQvUqVMnvfvuuzp+/Li6d++ubdu2uWf5jXP16lVdvnzZW3chSfvrrH3NmzdX/fr1tXfvXu3Zs8fjsT5t2jTVrl1bLVu21IYNGzyux2y+/85fX+8LFSqkcePGaevWrZo0aZJ+/PFHSdKKFStUtGhRtWnTRkuXLvX4rBT3/ps6deq7Xv/9KHfu3MqaNas+/PBDLVy4UAULFtRrr72mOnXqyM/PTxEREXruuecUHR2tatWqebvc+05sbKz79ejMmTM6efKke1nVqlX166+/qmrVqmrTpo0kKTIyUu3atZOPj4+aNWsmidezfxITE+N+7bpw4YIuXrzoXlayZEmtWbNGOXPmVJ8+fZQiRQpdv35db775pr777js9//zzSpUqFdv4LomNjZWZKXXq1Prss89UsWJF1a1bVx988IFcLpcuXbqkzz//XLt27VJ0dLS3y02WzEwpUqRQVFSUJk2apEqVKql+/foaP368JOnPP//UtGnTtHr1akm6d97LvRj64S7r27evBQUFWfv27a1u3bqWI0cOGzdunB0/ftzMbgyTzZ07txUqVOiWv/JevHjxbpecrP3diJ5ff/3VMmbMaHXr1rUDBw7ctl+LFi0sNDTUrl69yi9dfyNu26xevdo2bdpkq1evthw5cniMfojrEx4e7j43ABLm5sf0wIEDLTAw0H0C7MDAQGvatKl71NWSJUusaNGi9vDDD3ur3GRp7dq15nK5rGzZsjZ79mwzM1u5cqVFRETYTz/9ZPnz53eP9Jw5c6a5XC4rWrSox/kkN23aZH5+fvbzzz975T4kF389vDEsLMyCg4MtPDw83uFWb731FodgJbK4kVJxPv/8cytSpIi1bdvWtm7d6m4vVaqU1a9f33352rVrNmPGDPfkF0hct/vss23bNqtbt65Vq1bNPfItJibGZsyYYZUqVbLHHnvMfeoNnit3x+zZsz1Od/Laa69ZqVKlLDAw0J5//nn76quvzOz/ZjUtUaKENWrUyMqVK2elSpVif92Bv46KWrRokZUtW9aKFi1q1apVc0+g8NFHH1mePHmscuXK9uyzz9pTTz1lmTNn5qgMh0VHR7tfs06ePGmXLl2yP//808zMjh07ZgUKFLCcOXO6jwaLiYmxV1991R544AHbt2+f1+pOTmJiYtz74PLlyxYTE+P+zvb5559b1qxZPU5hY3bjtapQoULxZsX2NoK3+8TUqVMtd+7cHrOouVwuy5Url40aNco9W+mJEyesYcOGvEk67OYPntOmTbPXXnvN2rdvb3v27HGfs2337t0WEBBg9erVu+Vx6QcOHLAnn3zSHWQgvpvDyBUrVpjL5bJvv/3WDhw4YNmyZbMuXbrEC5S7du1qL730EmHmf/Dbb79Zv379bOXKle62ZcuWWZkyZax169Z26dIlu3Llis2fP9+ef/55DitNRIsWLTKXy2WPP/641atXzz799FP3srFjx1rVqlXt1KlTZnbjEMguXbpYkyZNPF7zz549aydOnLjrtScnCTm8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3F2vNbmK2wf79++333//3Tp37mxfffWVe/n27dvd4dvNI99OnDhx12tNDJyxNAkyM/cJUMeNG6euXbuqffv2On36tIoWLapu3bqpevXqGjp0qN58801t2bJFffv2VcqUKfXMM8/Ix8dHMTExXr4XydPN+2b58uW6cOGCatSooQEDBuirr75y98ufP7+eeuopRUZGqmXLllq4cKHHejjh8z/bt2+fzpw5o3Tp0mnevHn69NNP9eSTT6po0aL67rvvZGbq27evJOnq1auqV6+eYmNjlT59ei9XnnyYmSSpW7dueuihhzRq1CgFBga622+WMmVKZc6cWSEhIXe7zPvGgw8+qLFjx8rHx0c9e/bUjh07vF3SfSHuxP6S1KZNG7Vt21YnTpzQgAED9L///c89iQuv63fXzfsld+7cSp06taKiorxcVfJ34cIFrV+/Xk888YTWrVunoKAgzZo1S9u2bVPv3r01evRorVy5Ui+++KJSpUqlLl266MCBA9q8ebO3S79v2P8/gbkkbdu2TTt37tSSJUv0448/qm3btlq7dq0mTZqky5cvu6/z2WefqX379qpWrZq3yk4yUqRIoSNHjri31aJFi1SrVi0dOXJE+fPnV/ny5fXSSy/pt99+k6+vryTp+vXrCgwMdE/IA+e5XC4tXLhQ5cuXV9u2bfXtt9/qp59+ci/PmDGjmjZtqrffflvvvfee+vfvL+nGZElIHC6XS/Pnz1eFChVUunRpzZo1Szt37nQvL1mypPr166d8+fJp5MiRmjNnjiQpODjYWyX/N97L/PBv3DyaasCAAZYxY0Z77rnnLF++fJYrVy73L4YHDx60oUOHWurUqa1QoUJWrlw59zk0OMzCGTfvm9dff91y5sxpv//+u23ZssVatWplRYsWtUWLFrn7bNmyxZo3b24zZsxgJMS/1LZtWytVqpQ1btzYnnjiCZs5c6aZmU2aNMly5MjhPv/Cq6++agMGDGA7O+R///ufZc+e3eOXQnjP7t27rVevXhwCdJdxeOO96fTp01ahQgWP0VZIPLc6L9vRo0etZcuW5uvr6x75tmfPHnv66aetcOHClj9/fqtcubL7tAOhoaH26aef3v3i73OffvqphYWFWbNmzdz779q1a/biiy/aI488Yu++++4tD3fks9Q/27VrlxUoUMAKFixoLpfLfWSG2Y0RU1WrVrXg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NSAiIiJ62vS0XQARERER1Txzc3MMGDAAMTExEBEMGDAAzZs3V9dfunQJZWVl6NGjh7pMX18f3bp1w9mzZ6s9loODg/p/S0tLAMCtW7f+43hxVfdr1KgRTExMcOvWrb/0vIiIiIieZQzeiIiIiOqJMWPGYNKkSQCAzz777E8/jr6+vvp/RVEAABqN5r/ar3LfP7IfERERUW3FrqZERERE9UT//v1RWlqKsrIy9OvXr9o6Ozs7GBgYIDk5WV1WVlaGH374AR07dvzDv8PAwAAVFRVPrGYiIiKi2owt3oiIiIjqCV1dXbXbqK6ubrV1jRo1QlBQEKZPn45mzZrBxsYGixYtQmFhIcaOHfuHf0ebNm1w5coVpKWlwdraGo0bN0aDBg2e6PMgIiIiqi0YvBERERHVIyYmJr+77qOPPoJGo0FAQADu37+Prl27Ij4+Hk2bNv3Djz906FDExcXBw8MD9+7dQ3R0NAIDA59A5URERES1jyIiou0iiIiIiIiIiIiI6hqO8UZERERERERERFQDGLwRERERERERERHVAAZvRERERERERERENYDBGxERERERERERUQ1g8EZERERERERERFQDGLwRERERERERERHVAAZvRERERERERERENYDBGxERERERERERUQ1g8EZERERERERERFQDGLwRERERERERERHVAAZvRERERERERERENeD/ALb6BBt7Knl7AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Define calendar order and set MonthName as an ordered categorical for proper month sequence\n",
        "month_map = {1: \"January\", 2: \"February\", 3: \"March\", 4: \"April\",\n",
        "             5: \"May\", 6: \"June\", 7: \"July\", 8: \"August\",\n",
        "             9: \"September\", 10: \"October\", 11: \"November\", 12: \"December\"}\n",
        "ordered_months = list(month_map.values())\n",
        "crime_df['MonthName'] = pd.Categorical(\n",
        "    crime_df['MonthName'], categories=ordered_months, ordered=True\n",
        ")\n",
        "\n",
        "# Plot again with chronological order\n",
        "ax = crime_df['MonthName'].value_counts().reindex(ordered_months).plot(kind='bar', rot=45)\n",
        "ax.set_xlabel('Month')\n",
        "ax.set_ylabel('Number of Incidents')\n",
        "ax.set_title('Incidents by Month (Chronological)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "55a3b274",
      "metadata": {
        "id": "55a3b274"
      },
      "source": [
        "#### To Do #7\n",
        "- Plot a bar chart of incidents related to Theft by numeric month.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "5adfdfef",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 553
        },
        "id": "5adfdfef",
        "outputId": "17505f2c-bb78-46f7-bc30-e0940ae54ed5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-636428033.py:5: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
            "  d = pd.to_datetime(crime_df['Reported_Date'], errors='coerce', infer_datetime_format=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Choose a date column (prefers pre-parsed *_dt if available)\n",
        "if 'Reported_Date_dt' in crime_df.columns:\n",
        "    d = crime_df['Reported_Date_dt']\n",
        "elif 'Reported_Date' in crime_df.columns:\n",
        "    d = pd.to_datetime(crime_df['Reported_Date'], errors='coerce', infer_datetime_format=True)\n",
        "elif 'Incident_From_Date_dt' in crime_df.columns:\n",
        "    d = crime_df['Incident_From_Date_dt']\n",
        "else:\n",
        "    d = pd.to_datetime(crime_df['Incident_From_Date'], errors='coerce', infer_datetime_format=True)\n",
        "\n",
        "# Filter theft-related rows and count by numeric month\n",
        "mask = crime_df['NIBRS_Hi_Class'].str.contains('theft', case=False, na=False)\n",
        "month_counts = (\n",
        "    d[mask].dt.month\n",
        "      .value_counts()\n",
        "      .reindex(range(1, 12 + 1), fill_value=0)\n",
        "      .sort_index()\n",
        ")\n",
        "\n",
        "# Bar chart\n",
        "fig, ax = plt.subplots()\n",
        "ax.bar(month_counts.index.astype(int), month_counts.values)\n",
        "ax.set_xlabel('Month (1–12)')\n",
        "ax.set_ylabel('Theft-related incidents')\n",
        "ax.set_title('Theft-related incidents by month')\n",
        "ax.set_xticks(range(1, 13))\n",
        "plt.tight_layout()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7f01e5fb",
      "metadata": {
        "id": "7f01e5fb"
      },
      "source": [
        "#### To Do #8\n",
        "- Which month has the highest number of Theft related incidents?  \n",
        "August\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aee40d9f",
      "metadata": {
        "id": "aee40d9f"
      },
      "outputs": [],
      "source": [
        "#August"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e9233ae3",
      "metadata": {
        "id": "e9233ae3"
      },
      "source": [
        "#### To Do #9\n",
        "- Create a line plot of incidents and Theft related incidents over months and compare the two."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "598eb2ae",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 553
        },
        "id": "598eb2ae",
        "outputId": "c3299ef5-1e57-429d-b7dd-e280c8ede4ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3925294434.py:5: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
            "  d = pd.to_datetime(crime_df['Reported_Date'], errors='coerce', infer_datetime_format=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Pick a date column (prefer pre-parsed if available)\n",
        "if 'Reported_Date_dt' in crime_df.columns:\n",
        "    d = crime_df['Reported_Date_dt']\n",
        "elif 'Reported_Date' in crime_df.columns:\n",
        "    d = pd.to_datetime(crime_df['Reported_Date'], errors='coerce', infer_datetime_format=True)\n",
        "elif 'Incident_From_Date_dt' in crime_df.columns:\n",
        "    d = crime_df['Incident_From_Date_dt']\n",
        "else:\n",
        "    d = pd.to_datetime(crime_df['Incident_From_Date'], errors='coerce', infer_datetime_format=True)\n",
        "\n",
        "# Monthly counts\n",
        "all_month = (\n",
        "    d.dt.month.value_counts()\n",
        "      .reindex(range(1, 13), fill_value=0)\n",
        "      .sort_index()\n",
        ")\n",
        "\n",
        "theft_mask = crime_df['NIBRS_Hi_Class'].str.contains('theft', case=False, na=False)\n",
        "theft_month = (\n",
        "    d[theft_mask].dt.month.value_counts()\n",
        "      .reindex(range(1, 13), fill_value=0)\n",
        "      .sort_index()\n",
        ")\n",
        "\n",
        "# Single line plot comparing both series\n",
        "fig, ax = plt.subplots()\n",
        "ax.plot(all_month.index, all_month.values, marker='o', label='All incidents')\n",
        "ax.plot(theft_month.index, theft_month.values, marker='o', label='Theft-related incidents')\n",
        "ax.set_xlabel('Month (1–12)')\n",
        "ax.set_ylabel('Number of incidents')\n",
        "ax.set_title('Incidents vs. Theft-related Incidents by Month')\n",
        "ax.set_xticks(range(1, 13))\n",
        "ax.legend()\n",
        "plt.tight_layout()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b8635864",
      "metadata": {
        "id": "b8635864"
      },
      "source": [
        "## Deriving and Ordering Day of Week\n",
        "We can use the same mapping-and-ordering idea with **day of the week**. Without ordering, weekdays will sort alphabetically; with a categorical order, they appear Monday through Sunday."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "0a78e8ea",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "0a78e8ea",
        "outputId": "7f821a43-0636-464a-ec34-046da053cc73"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Reported_Date Weekday\n",
              "id                      \n",
              "1     2016-01-01  Friday\n",
              "2     2016-01-01  Friday\n",
              "3     2016-01-01  Friday\n",
              "4     2016-01-01  Friday\n",
              "5     2016-01-01  Friday"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-014ecbf0-0ba2-4ccc-962a-039b2b0aa4d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Reported_Date</th>\n",
              "      <th>Weekday</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-014ecbf0-0ba2-4ccc-962a-039b2b0aa4d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-014ecbf0-0ba2-4ccc-962a-039b2b0aa4d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-014ecbf0-0ba2-4ccc-962a-039b2b0aa4d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-453a4565-0cd5-4653-9679-56160f19795d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-453a4565-0cd5-4653-9679-56160f19795d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-453a4565-0cd5-4653-9679-56160f19795d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"crime_df[['Reported_Date', 'Weekday']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reported_Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-01-01 00:00:00\",\n        \"max\": \"2016-01-01 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2016-01-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weekday\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Friday\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "# Extract the weekday name from Reported_Date\n",
        "crime_df['Weekday'] = crime_df['Reported_Date'].dt.day_name()\n",
        "crime_df[['Reported_Date', 'Weekday']].head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "9487d07e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "9487d07e",
        "outputId": "3e4bc4a3-812a-420e-b6e4-71f1f8ac1eb5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot without ordering: labels will be alphabetical (e.g., Friday, Monday, Saturday, ...)\n",
        "ax = crime_df['Weekday'].value_counts().plot(kind='bar', rot=45)\n",
        "ax.set_xlabel('Weekday')\n",
        "ax.set_ylabel('Number of Incidents')\n",
        "ax.set_title('Incidents by Weekday (Unordered)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "924255ec",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "924255ec",
        "outputId": "c8667bea-fcde-4349-f95e-59d3ce60a246"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Define the calendar order for weekdays and set as ordered categorical\n",
        "weekday_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n",
        "crime_df['Weekday'] = pd.Categorical(crime_df['Weekday'], categories=weekday_order, ordered=True)\n",
        "\n",
        "# Plot again with correct weekday order\n",
        "ax = crime_df['Weekday'].value_counts().reindex(weekday_order).plot(kind='bar', rot=45)\n",
        "ax.set_xlabel('Weekday')\n",
        "ax.set_ylabel('Number of Incidents')\n",
        "ax.set_title('Incidents by Weekday (Chronological)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cda4c02b",
      "metadata": {
        "id": "cda4c02b"
      },
      "source": [
        "#### To Do #10\n",
        "- Compute the proportion of incidents that occur on weekends vs. weekdays.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "id": "66d70a61",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "66d70a61",
        "outputId": "eb5441b1-abf1-4933-ce0d-60af897aecfd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reported_Date\n",
            "Weekday    75.48\n",
            "Weekend    24.52\n",
            "Name: proportion, dtype: float64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3017842141.py:7: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
            "  d = pd.to_datetime(crime_df['Reported_Date'], errors='coerce', infer_datetime_format=True)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Choose a date column\n",
        "if 'Reported_Date_dt' in crime_df.columns:\n",
        "    d = crime_df['Reported_Date_dt']\n",
        "elif 'Reported_Date' in crime_df.columns:\n",
        "    d = pd.to_datetime(crime_df['Reported_Date'], errors='coerce', infer_datetime_format=True)\n",
        "elif 'Incident_From_Date_dt' in crime_df.columns:\n",
        "    d = crime_df['Incident_From_Date_dt']\n",
        "else:\n",
        "    d = pd.to_datetime(crime_df['Incident_From_Date'], errors='coerce', infer_datetime_format=True)\n",
        "\n",
        "# Percentage of incidents on Weekdays vs Weekends (based on dayofweek 0=Mon ... 6=Sun)\n",
        "props = (100 * d.dropna().dt.dayofweek.ge(5).value_counts(normalize=True)) \\\n",
        "    .rename(index={True: 'Weekend', False: 'Weekday'}) \\\n",
        "    .reindex(['Weekday', 'Weekend']) \\\n",
        "    .round(2)\n",
        "\n",
        "print(props)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bd4f2334",
      "metadata": {
        "id": "bd4f2334"
      },
      "source": [
        "## Merging Data\n",
        "There might be scenarios where you have two different sources for your data and you wish to combine them for analysis and modeling.\n",
        "\n",
        "Let's look at a simple example of how to join to data frames.\n",
        "\n",
        "In our original 2016 CMPD incident dataset the police division where an incident is reported is indicated using the Division number. We have another dataset with the mapping between division numbers and their names.\n",
        "\n",
        "We can join the CMPD dataset with division mapping data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "id": "00e7b761",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "00e7b761",
        "outputId": "490e8f3e-890c-497f-8bf8-5317216d4513"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Complaint_No Block_No Direction                               Street_Name  \\\n",
              "0  2.020000e+13     2219      <NA>  HEATHER GLEN                               \n",
              "1  2.020000e+13     8120        E   W T HARRIS                                 \n",
              "2  2.020000e+13     1415      <NA>  TOM HUNTER                                 \n",
              "3  2.020000e+13     <NA>      <NA>  ORR                                        \n",
              "4  2.020000e+13     6500        N   TRYON                                      \n",
              "\n",
              "  Street_Type Suffix Apt_No                                      City State  \\\n",
              "0          LN   <NA>   <NA>  CHARLOTTE                                   NC   \n",
              "1          BV   <NA>   <NA>  CHARLOTTE                                   NC   \n",
              "2          RD   <NA>    220  CHARLOTTE                                   NC   \n",
              "3          RD   <NA>     58  CHARLOTTE                                   NC   \n",
              "4          ST   <NA>   <NA>  CHARLOTTE                                   NC   \n",
              "\n",
              "  Zipcode  ...                                             Place2  \\\n",
              "0   28208  ...  Private Residence                             ...   \n",
              "1   28215  ...  Street/Highway                                ...   \n",
              "2   28213  ...  Hotel/Motel                                   ...   \n",
              "3    <NA>  ...  Mobile Home/Houseboat                         ...   \n",
              "4   28213  ...  Street/Highway                                ...   \n",
              "\n",
              "                                    Clearance_Status Clearance_Date  \\\n",
              "0  Open                                          ...           <NA>   \n",
              "1  Open                                          ...           <NA>   \n",
              "2  Normal Clearance - Cleared by Arrest          ...         1/1/16   \n",
              "3  Open                                          ...           <NA>   \n",
              "4  Open                                          ...           <NA>   \n",
              "\n",
              "                 Case_Status                               Reporting_Agency  \\\n",
              "0  Further Investigation      Charlotte-Mecklenburg Police Department         \n",
              "1  Inactive                   Charlotte-Mecklenburg Police Department         \n",
              "2  Close/Cleared              Charlotte-Mecklenburg Police Department         \n",
              "3  Inactive                   Charlotte-Mecklenburg Police Department         \n",
              "4  Inactive                   Charlotte-Mecklenburg Police Department         \n",
              "\n",
              "                NIBRS_Hi_Class Month  MonthName Weekday  \\\n",
              "0          Motor Vehicle Theft     1    January  Friday   \n",
              "1  Hit And Run (Property Only)     1    January  Friday   \n",
              "2               Simple Assault     1    January  Friday   \n",
              "3           Aggravated Assault     1    January  Friday   \n",
              "4           Aggravated Assault     1    January  Friday   \n",
              "\n",
              "            division_name  \n",
              "0        Freedom Division  \n",
              "1  Hickory Grove Division  \n",
              "2    North Tryon Division  \n",
              "3    North Tryon Division  \n",
              "4    North Tryon Division  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bbbf6655-cf4a-4b32-a138-161fcad6ab4f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Complaint_No</th>\n",
              "      <th>Block_No</th>\n",
              "      <th>Direction</th>\n",
              "      <th>Street_Name</th>\n",
              "      <th>Street_Type</th>\n",
              "      <th>Suffix</th>\n",
              "      <th>Apt_No</th>\n",
              "      <th>City</th>\n",
              "      <th>State</th>\n",
              "      <th>Zipcode</th>\n",
              "      <th>...</th>\n",
              "      <th>Place2</th>\n",
              "      <th>Clearance_Status</th>\n",
              "      <th>Clearance_Date</th>\n",
              "      <th>Case_Status</th>\n",
              "      <th>Reporting_Agency</th>\n",
              "      <th>NIBRS_Hi_Class</th>\n",
              "      <th>Month</th>\n",
              "      <th>MonthName</th>\n",
              "      <th>Weekday</th>\n",
              "      <th>division_name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>2219</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>HEATHER GLEN</td>\n",
              "      <td>LN</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28208</td>\n",
              "      <td>...</td>\n",
              "      <td>Private Residence                             ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Further Investigation</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Motor Vehicle Theft</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "      <td>Friday</td>\n",
              "      <td>Freedom Division</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>8120</td>\n",
              "      <td>E</td>\n",
              "      <td>W T HARRIS</td>\n",
              "      <td>BV</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28215</td>\n",
              "      <td>...</td>\n",
              "      <td>Street/Highway                                ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Inactive</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Hit And Run (Property Only)</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "      <td>Friday</td>\n",
              "      <td>Hickory Grove Division</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>1415</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>TOM HUNTER</td>\n",
              "      <td>RD</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>220</td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28213</td>\n",
              "      <td>...</td>\n",
              "      <td>Hotel/Motel                                   ...</td>\n",
              "      <td>Normal Clearance - Cleared by Arrest          ...</td>\n",
              "      <td>1/1/16</td>\n",
              "      <td>Close/Cleared</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Simple Assault</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "      <td>Friday</td>\n",
              "      <td>North Tryon Division</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>ORR</td>\n",
              "      <td>RD</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>58</td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>...</td>\n",
              "      <td>Mobile Home/Houseboat                         ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Inactive</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Aggravated Assault</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "      <td>Friday</td>\n",
              "      <td>North Tryon Division</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.020000e+13</td>\n",
              "      <td>6500</td>\n",
              "      <td>N</td>\n",
              "      <td>TRYON</td>\n",
              "      <td>ST</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>CHARLOTTE</td>\n",
              "      <td>NC</td>\n",
              "      <td>28213</td>\n",
              "      <td>...</td>\n",
              "      <td>Street/Highway                                ...</td>\n",
              "      <td>Open                                          ...</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Inactive</td>\n",
              "      <td>Charlotte-Mecklenburg Police Department</td>\n",
              "      <td>Aggravated Assault</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "      <td>Friday</td>\n",
              "      <td>North Tryon Division</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbbf6655-cf4a-4b32-a138-161fcad6ab4f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bbbf6655-cf4a-4b32-a138-161fcad6ab4f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bbbf6655-cf4a-4b32-a138-161fcad6ab4f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-70eed629-43aa-47f4-9707-d23827449efa\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-70eed629-43aa-47f4-9707-d23827449efa')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-70eed629-43aa-47f4-9707-d23827449efa button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "merged_df"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "# Load the division mapping (e.g., columns: division_number, division_name)\n",
        "df2 = pd.read_csv('cmpd_divisions.csv')\n",
        "#Align column names\n",
        "df2 = df2.rename(columns={'division_number': 'Division'})\n",
        "\n",
        "#Align dtypes for the join key\n",
        "crime_df['Division'] = crime_df['Division'].astype(str)\n",
        "df2['Division'] = df2['Division'].astype(str)\n",
        "\n",
        "#Merge\n",
        "merged_df = pd.merge(crime_df, df2, how='left', on='Division')\n",
        "merged_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "aa86dbb6",
      "metadata": {
        "id": "aa86dbb6"
      },
      "source": [
        "#### To Do #11\n",
        "- How many rows in `merged_df` have missing division names after the join? Why might that happen?  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "8ad3b0c6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ad3b0c6",
        "outputId": "e9a33e7b-9469-4594-a5f4-c0d8ce1d08de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "89\n"
          ]
        }
      ],
      "source": [
        "missing_divisions = merged_df['division_name'].isna().sum()\n",
        "print(missing_divisions)\n",
        "#Invalid characters, case sensitivity, inconsistent data types"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a073126a",
      "metadata": {
        "id": "a073126a"
      },
      "source": [
        " #### To Do #12\n",
        "Create a bar chart showing incidents by division name and find the division with the fewest incidents."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "id": "3b0164d8",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 793
        },
        "id": "3b0164d8",
        "outputId": "aad521b7-1414-45ba-f325-bb2ffb4085a9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(close=None, block=None)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.12/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "block : bool, optional\n",
              "    Whether to wait for all figures to be closed before returning.\n",
              "\n",
              "    If `True` block and run the GUI main loop until all figure windows\n",
              "    are closed.\n",
              "\n",
              "    If `False` ensure that all figure windows are displayed and return\n",
              "    immediately.  In this case, you are responsible for ensuring\n",
              "    that the event loop is running to have responsive figures.\n",
              "\n",
              "    Defaults to True in non-interactive mode and to False in interactive\n",
              "    mode (see `.pyplot.isinteractive`).\n",
              "\n",
              "See Also\n",
              "--------\n",
              "ion : Enable interactive mode, which shows / updates the figure after\n",
              "      every plotting command, so that calling ``show()`` is not necessary.\n",
              "ioff : Disable interactive mode.\n",
              "savefig : Save the figure to an image file instead of showing it on screen.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "**Saving figures to file and showing a window at the same time**\n",
              "\n",
              "If you want an image file as well as a user interface window, use\n",
              "`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n",
              "``show()`` the figure is closed and thus unregistered from pyplot. Calling\n",
              "`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n",
              "limitation of command order does not apply if the show is non-blocking or\n",
              "if you keep a reference to the figure and use `.Figure.savefig`.\n",
              "\n",
              "**Auto-show in jupyter notebooks**\n",
              "\n",
              "The jupyter backends (activated via ``%matplotlib inline``,\n",
              "``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n",
              "the end of every cell by default. Thus, you usually don&#x27;t have to call it\n",
              "explicitly there.</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 569);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "bar_chart = merged_df['division_name'].value_counts().plot(kind='bar', rot=45)\n",
        "bar_chart.set_xlabel('Division Name')\n",
        "bar_chart.set_ylabel('Number of Incidents')\n",
        "bar_chart.set_title('Incidents by Division Name')\n",
        "plt.show"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.5"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}